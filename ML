****************** Installing opencv***********************
!pip install opencv-python

***************** Getting dataset**************************
import cv2
img=cv2.imread('../../img_1.jpg')
img.shape
img[0]
import matplotlib.pyplot as plt
plt.imshow(img)

while True:
    cv2.imshow('result',img)
    if cv2.waitKey(2)==27:
        break
cv2.destroyAllWindows()

haar_data=cv2.CascadeClassifier('C:\Program Files\Python39\Lib\site-packages\haarcascade_frontalface_default.xml')

haar_data.detectMultiScale(img)

while True:
    faces=haar_data.detectMultiScale(img)
    for x,y,w,h in faces:
        cv2.rectangle(img,(x,y),(x+w, y+h),(255,0,255),4)
    cv2.imshow('result',img)
    if cv2.waitKey(2)==27:
        break
cv2.destroyAllWindows()

// Collecting data
capture=cv2.VideoCapture(0)
data=[]
while True:
    flag,img=capture.read()
    if flag:
        faces=haar_data.detectMultiScale(img)
        for x,y,w,h in faces:
            cv2.rectangle(img,(x,y),(x+w, y+h),(255,0,255),4)
            face=img[y:y+h,x:x+h,:]
            face=cv2.resize(face,(50,50))
            print(len(data))
            if len(data)<400:
                data.append(face)
        cv2.imshow('result',img)
        if cv2.waitKey(2)==27 or len(data)>=200:
            break
capture.release
cv2.destroyAllWindows()

import numpy as np

np.save('without_mask3.npy',data) 

np.save('with_mask3.npy',data)

plt.imshow(data[0])


******************Using and manipulating dataset********************8
import numpy as np
import cv2

with_mask3=np.load('with_mask3.npy')
without_mask3=np.load('without_mask3.npy')

with_mask3.shape

without_mask3.shape

with_mask3 =with_mask3.reshape(200,50*50*3)
without_mask3 = without_mask3.reshape(200,50*50*3)

with_mask3.shape

without_mask3.shape

X=np.r_[with_mask3,without_mask3]

X.shape

labels=np.zeros(X.shape[0])

labels[200:]=1.0

names={0: 'Mask',1:'No Mask'}

from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(X,labels,test_size=0.25)

x_train.shape

from sklearn.decomposition import PCA

pca=PCA(n_components=3)
x_train=pca.fit_transform(x_train)

x_train[0]

x_train.shape

svm=SVC()
svm.fit(x_train, y_train)

 x_test=pca.transform(x_test)
y_pred=svm.predict(x_test)

accuracy_score(y_test,y_pred)

haar_data=cv2.CascadeClassifier('C:\Program Files\Python39\Lib\site-packages\haarcascade_frontalface_default.xml')
capture=cv2.VideoCapture(0)
data=[]
font=cv2.FONT_HERSHEY_COMPLEX
while True:
    flag,img=capture.read()
    if flag:
        faces=haar_data.detectMultiScale(img)
        for x,y,w,h in faces:
            cv2.rectangle(img,(x,y),(x+w, y+h),(255,0,255),4)
            face=img[y:y+h,x:x+h,:]
            face=cv2.resize(face,(50,50))
            face=face.reshape(1,-1)
            face=pca.transform(face)
            pred=svm.predict(face)
            n=names[int(pred)]
            cv2.putText(img,n,(x,y),font,1,(244,250,250),2)
            print(n)
        cv2.imshow('result',img)
        if cv2.waitKey(2)==27:
            break
capture.release
cv2.destroyAllWindows()

